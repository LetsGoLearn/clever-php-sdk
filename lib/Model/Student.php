<?php
/**
 * Student
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Data API
 *
 * Serves the Clever Data API
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Student Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Student implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Student';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created' => 'string',
        'credentials' => '\OpenAPI\Client\Model\Credentials',
        'dob' => 'string',
        'ell_status' => 'string',
        'enrollments' => '\OpenAPI\Client\Model\SchoolEnrollment[]',
        'ext' => 'object',
        'gender' => 'string',
        'grade' => 'string',
        'graduation_year' => 'string',
        'hispanic_ethnicity' => 'string',
        'last_modified' => 'string',
        'legacy_id' => 'string',
        'location' => '\OpenAPI\Client\Model\Location',
        'race' => 'string',
        'school' => 'string',
        'schools' => 'string[]',
        'sis_id' => 'string',
        'state_id' => 'string',
        'student_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created' => 'datetime',
        'credentials' => null,
        'dob' => null,
        'ell_status' => null,
        'enrollments' => null,
        'ext' => null,
        'gender' => null,
        'grade' => null,
        'graduation_year' => null,
        'hispanic_ethnicity' => null,
        'last_modified' => 'datetime',
        'legacy_id' => null,
        'location' => null,
        'race' => null,
        'school' => null,
        'schools' => null,
        'sis_id' => null,
        'state_id' => null,
        'student_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'created' => false,
		'credentials' => false,
		'dob' => true,
		'ell_status' => true,
		'enrollments' => false,
		'ext' => false,
		'gender' => true,
		'grade' => true,
		'graduation_year' => true,
		'hispanic_ethnicity' => true,
		'last_modified' => false,
		'legacy_id' => false,
		'location' => false,
		'race' => true,
		'school' => false,
		'schools' => false,
		'sis_id' => false,
		'state_id' => true,
		'student_number' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'credentials' => 'credentials',
        'dob' => 'dob',
        'ell_status' => 'ell_status',
        'enrollments' => 'enrollments',
        'ext' => 'ext',
        'gender' => 'gender',
        'grade' => 'grade',
        'graduation_year' => 'graduation_year',
        'hispanic_ethnicity' => 'hispanic_ethnicity',
        'last_modified' => 'last_modified',
        'legacy_id' => 'legacy_id',
        'location' => 'location',
        'race' => 'race',
        'school' => 'school',
        'schools' => 'schools',
        'sis_id' => 'sis_id',
        'state_id' => 'state_id',
        'student_number' => 'student_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'credentials' => 'setCredentials',
        'dob' => 'setDob',
        'ell_status' => 'setEllStatus',
        'enrollments' => 'setEnrollments',
        'ext' => 'setExt',
        'gender' => 'setGender',
        'grade' => 'setGrade',
        'graduation_year' => 'setGraduationYear',
        'hispanic_ethnicity' => 'setHispanicEthnicity',
        'last_modified' => 'setLastModified',
        'legacy_id' => 'setLegacyId',
        'location' => 'setLocation',
        'race' => 'setRace',
        'school' => 'setSchool',
        'schools' => 'setSchools',
        'sis_id' => 'setSisId',
        'state_id' => 'setStateId',
        'student_number' => 'setStudentNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'credentials' => 'getCredentials',
        'dob' => 'getDob',
        'ell_status' => 'getEllStatus',
        'enrollments' => 'getEnrollments',
        'ext' => 'getExt',
        'gender' => 'getGender',
        'grade' => 'getGrade',
        'graduation_year' => 'getGraduationYear',
        'hispanic_ethnicity' => 'getHispanicEthnicity',
        'last_modified' => 'getLastModified',
        'legacy_id' => 'getLegacyId',
        'location' => 'getLocation',
        'race' => 'getRace',
        'school' => 'getSchool',
        'schools' => 'getSchools',
        'sis_id' => 'getSisId',
        'state_id' => 'getStateId',
        'student_number' => 'getStudentNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ELL_STATUS_Y = 'Y';
    public const ELL_STATUS_N = 'N';
    public const ELL_STATUS_EMPTY = '';
    public const GENDER_M = 'M';
    public const GENDER_F = 'F';
    public const GENDER_X = 'X';
    public const GENDER_EMPTY = '';
    public const GRADE_INFANT_TODDLER = 'InfantToddler';
    public const GRADE_PRESCHOOL = 'Preschool';
    public const GRADE_PRE_KINDERGARTEN = 'PreKindergarten';
    public const GRADE_TRANSITIONAL_KINDERGARTEN = 'TransitionalKindergarten';
    public const GRADE_KINDERGARTEN = 'Kindergarten';
    public const GRADE__1 = '1';
    public const GRADE__2 = '2';
    public const GRADE__3 = '3';
    public const GRADE__4 = '4';
    public const GRADE__5 = '5';
    public const GRADE__6 = '6';
    public const GRADE__7 = '7';
    public const GRADE__8 = '8';
    public const GRADE__9 = '9';
    public const GRADE__10 = '10';
    public const GRADE__11 = '11';
    public const GRADE__12 = '12';
    public const GRADE__13 = '13';
    public const GRADE_POST_GRADUATE = 'PostGraduate';
    public const GRADE_UNGRADED = 'Ungraded';
    public const GRADE_OTHER = 'Other';
    public const GRADE_EMPTY = '';
    public const HISPANIC_ETHNICITY_Y = 'Y';
    public const HISPANIC_ETHNICITY_N = 'N';
    public const HISPANIC_ETHNICITY_EMPTY = '';
    public const RACE_CAUCASIAN = 'Caucasian';
    public const RACE_ASIAN = 'Asian';
    public const RACE_BLACK_OR_AFRICAN_AMERICAN = 'Black or African American';
    public const RACE_AMERICAN_INDIAN = 'American Indian';
    public const RACE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER = 'Hawaiian or Other Pacific Islander';
    public const RACE_TWO_OR_MORE_RACES = 'Two or More Races';
    public const RACE_UNKNOWN = 'Unknown';
    public const RACE_EMPTY = '';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEllStatusAllowableValues()
    {
        return [
            self::ELL_STATUS_Y,
            self::ELL_STATUS_N,
            self::ELL_STATUS_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_M,
            self::GENDER_F,
            self::GENDER_X,
            self::GENDER_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGradeAllowableValues()
    {
        return [
            self::GRADE_INFANT_TODDLER,
            self::GRADE_PRESCHOOL,
            self::GRADE_PRE_KINDERGARTEN,
            self::GRADE_TRANSITIONAL_KINDERGARTEN,
            self::GRADE_KINDERGARTEN,
            self::GRADE__1,
            self::GRADE__2,
            self::GRADE__3,
            self::GRADE__4,
            self::GRADE__5,
            self::GRADE__6,
            self::GRADE__7,
            self::GRADE__8,
            self::GRADE__9,
            self::GRADE__10,
            self::GRADE__11,
            self::GRADE__12,
            self::GRADE__13,
            self::GRADE_POST_GRADUATE,
            self::GRADE_UNGRADED,
            self::GRADE_OTHER,
            self::GRADE_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHispanicEthnicityAllowableValues()
    {
        return [
            self::HISPANIC_ETHNICITY_Y,
            self::HISPANIC_ETHNICITY_N,
            self::HISPANIC_ETHNICITY_EMPTY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRaceAllowableValues()
    {
        return [
            self::RACE_CAUCASIAN,
            self::RACE_ASIAN,
            self::RACE_BLACK_OR_AFRICAN_AMERICAN,
            self::RACE_AMERICAN_INDIAN,
            self::RACE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER,
            self::RACE_TWO_OR_MORE_RACES,
            self::RACE_UNKNOWN,
            self::RACE_EMPTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('credentials', $data ?? [], null);
        $this->setIfExists('dob', $data ?? [], null);
        $this->setIfExists('ell_status', $data ?? [], null);
        $this->setIfExists('enrollments', $data ?? [], null);
        $this->setIfExists('ext', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('graduation_year', $data ?? [], null);
        $this->setIfExists('hispanic_ethnicity', $data ?? [], null);
        $this->setIfExists('last_modified', $data ?? [], null);
        $this->setIfExists('legacy_id', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('race', $data ?? [], null);
        $this->setIfExists('school', $data ?? [], null);
        $this->setIfExists('schools', $data ?? [], null);
        $this->setIfExists('sis_id', $data ?? [], null);
        $this->setIfExists('state_id', $data ?? [], null);
        $this->setIfExists('student_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['dob']) && !preg_match("/(?:[0-9]{1,2})\/([0-9]{1,2})\/([0-9]{4})/", $this->container['dob'])) {
            $invalidProperties[] = "invalid value for 'dob', must be conform to the pattern /(?:[0-9]{1,2})\/([0-9]{1,2})\/([0-9]{4})/.";
        }

        $allowedValues = $this->getEllStatusAllowableValues();
        if (!is_null($this->container['ell_status']) && !in_array($this->container['ell_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ell_status', must be one of '%s'",
                $this->container['ell_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gender', must be one of '%s'",
                $this->container['gender'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGradeAllowableValues();
        if (!is_null($this->container['grade']) && !in_array($this->container['grade'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'grade', must be one of '%s'",
                $this->container['grade'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHispanicEthnicityAllowableValues();
        if (!is_null($this->container['hispanic_ethnicity']) && !in_array($this->container['hispanic_ethnicity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hispanic_ethnicity', must be one of '%s'",
                $this->container['hispanic_ethnicity'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRaceAllowableValues();
        if (!is_null($this->container['race']) && !in_array($this->container['race'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'race', must be one of '%s'",
                $this->container['race'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return string|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string|null $created created
     *
     * @return self
     */
    public function setCreated($created)
    {

        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }

        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets credentials
     *
     * @return \OpenAPI\Client\Model\Credentials|null
     */
    public function getCredentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param \OpenAPI\Client\Model\Credentials|null $credentials credentials
     *
     * @return self
     */
    public function setCredentials($credentials)
    {

        if (is_null($credentials)) {
            throw new \InvalidArgumentException('non-nullable credentials cannot be null');
        }

        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return string|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param string|null $dob dob
     *
     * @return self
     */
    public function setDob($dob)
    {

        if (!is_null($dob) && (!preg_match("/(?:[0-9]{1,2})\/([0-9]{1,2})\/([0-9]{4})/", $dob))) {
            throw new \InvalidArgumentException("invalid value for \$dob when calling Student., must conform to the pattern /(?:[0-9]{1,2})\/([0-9]{1,2})\/([0-9]{4})/.");
        }


        if (is_null($dob)) {
            array_push($this->openAPINullablesSetToNull, 'dob');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dob', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets ell_status
     *
     * @return string|null
     */
    public function getEllStatus()
    {
        return $this->container['ell_status'];
    }

    /**
     * Sets ell_status
     *
     * @param string|null $ell_status ell_status
     *
     * @return self
     */
    public function setEllStatus($ell_status)
    {
        $allowedValues = $this->getEllStatusAllowableValues();
        if (!is_null($ell_status) && !in_array($ell_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ell_status', must be one of '%s'",
                    $ell_status,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($ell_status)) {
            array_push($this->openAPINullablesSetToNull, 'ell_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ell_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['ell_status'] = $ell_status;

        return $this;
    }

    /**
     * Gets enrollments
     *
     * @return \OpenAPI\Client\Model\SchoolEnrollment[]|null
     */
    public function getEnrollments()
    {
        return $this->container['enrollments'];
    }

    /**
     * Sets enrollments
     *
     * @param \OpenAPI\Client\Model\SchoolEnrollment[]|null $enrollments enrollments
     *
     * @return self
     */
    public function setEnrollments($enrollments)
    {

        if (is_null($enrollments)) {
            throw new \InvalidArgumentException('non-nullable enrollments cannot be null');
        }

        $this->container['enrollments'] = $enrollments;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return object|null
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param object|null $ext ext
     *
     * @return self
     */
    public function setExt($ext)
    {

        if (is_null($ext)) {
            throw new \InvalidArgumentException('non-nullable ext cannot be null');
        }

        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gender', must be one of '%s'",
                    $gender,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return string|null
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param string|null $grade grade
     *
     * @return self
     */
    public function setGrade($grade)
    {
        $allowedValues = $this->getGradeAllowableValues();
        if (!is_null($grade) && !in_array($grade, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'grade', must be one of '%s'",
                    $grade,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($grade)) {
            array_push($this->openAPINullablesSetToNull, 'grade');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grade', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets graduation_year
     *
     * @return string|null
     */
    public function getGraduationYear()
    {
        return $this->container['graduation_year'];
    }

    /**
     * Sets graduation_year
     *
     * @param string|null $graduation_year graduation_year
     *
     * @return self
     */
    public function setGraduationYear($graduation_year)
    {

        if (is_null($graduation_year)) {
            array_push($this->openAPINullablesSetToNull, 'graduation_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('graduation_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['graduation_year'] = $graduation_year;

        return $this;
    }

    /**
     * Gets hispanic_ethnicity
     *
     * @return string|null
     */
    public function getHispanicEthnicity()
    {
        return $this->container['hispanic_ethnicity'];
    }

    /**
     * Sets hispanic_ethnicity
     *
     * @param string|null $hispanic_ethnicity hispanic_ethnicity
     *
     * @return self
     */
    public function setHispanicEthnicity($hispanic_ethnicity)
    {
        $allowedValues = $this->getHispanicEthnicityAllowableValues();
        if (!is_null($hispanic_ethnicity) && !in_array($hispanic_ethnicity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hispanic_ethnicity', must be one of '%s'",
                    $hispanic_ethnicity,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($hispanic_ethnicity)) {
            array_push($this->openAPINullablesSetToNull, 'hispanic_ethnicity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hispanic_ethnicity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['hispanic_ethnicity'] = $hispanic_ethnicity;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return string|null
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param string|null $last_modified last_modified
     *
     * @return self
     */
    public function setLastModified($last_modified)
    {

        if (is_null($last_modified)) {
            throw new \InvalidArgumentException('non-nullable last_modified cannot be null');
        }

        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets legacy_id
     *
     * @return string|null
     */
    public function getLegacyId()
    {
        return $this->container['legacy_id'];
    }

    /**
     * Sets legacy_id
     *
     * @param string|null $legacy_id legacy_id
     *
     * @return self
     */
    public function setLegacyId($legacy_id)
    {

        if (is_null($legacy_id)) {
            throw new \InvalidArgumentException('non-nullable legacy_id cannot be null');
        }

        $this->container['legacy_id'] = $legacy_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\Location|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\Location|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {

        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets race
     *
     * @return string|null
     */
    public function getRace()
    {
        return $this->container['race'];
    }

    /**
     * Sets race
     *
     * @param string|null $race race
     *
     * @return self
     */
    public function setRace($race)
    {
        $allowedValues = $this->getRaceAllowableValues();
        if (!is_null($race) && !in_array($race, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'race', must be one of '%s'",
                    $race,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($race)) {
            array_push($this->openAPINullablesSetToNull, 'race');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('race', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['race'] = $race;

        return $this;
    }

    /**
     * Gets school
     *
     * @return string|null
     */
    public function getSchool()
    {
        return $this->container['school'];
    }

    /**
     * Sets school
     *
     * @param string|null $school school
     *
     * @return self
     */
    public function setSchool($school)
    {

        if (is_null($school)) {
            throw new \InvalidArgumentException('non-nullable school cannot be null');
        }

        $this->container['school'] = $school;

        return $this;
    }

    /**
     * Gets schools
     *
     * @return string[]|null
     */
    public function getSchools()
    {
        return $this->container['schools'];
    }

    /**
     * Sets schools
     *
     * @param string[]|null $schools schools
     *
     * @return self
     */
    public function setSchools($schools)
    {

        if (is_null($schools)) {
            throw new \InvalidArgumentException('non-nullable schools cannot be null');
        }

        $this->container['schools'] = $schools;

        return $this;
    }

    /**
     * Gets sis_id
     *
     * @return string|null
     */
    public function getSisId()
    {
        return $this->container['sis_id'];
    }

    /**
     * Sets sis_id
     *
     * @param string|null $sis_id sis_id
     *
     * @return self
     */
    public function setSisId($sis_id)
    {

        if (is_null($sis_id)) {
            throw new \InvalidArgumentException('non-nullable sis_id cannot be null');
        }

        $this->container['sis_id'] = $sis_id;

        return $this;
    }

    /**
     * Gets state_id
     *
     * @return string|null
     */
    public function getStateId()
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     *
     * @param string|null $state_id state_id
     *
     * @return self
     */
    public function setStateId($state_id)
    {

        if (is_null($state_id)) {
            array_push($this->openAPINullablesSetToNull, 'state_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets student_number
     *
     * @return string|null
     */
    public function getStudentNumber()
    {
        return $this->container['student_number'];
    }

    /**
     * Sets student_number
     *
     * @param string|null $student_number student_number
     *
     * @return self
     */
    public function setStudentNumber($student_number)
    {

        if (is_null($student_number)) {
            array_push($this->openAPINullablesSetToNull, 'student_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['student_number'] = $student_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


