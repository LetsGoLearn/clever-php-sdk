<?php
/**
 * Teacher
 *
 * PHP version 5
 *
 * @category Class
 * @package  Clever\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data API
 *
 * Serves the Clever Data API
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Clever\Client\Model;

use \ArrayAccess;
use \Clever\Client\ObjectSerializer;

/**
 * Teacher Class Doc Comment
 *
 * @category Class
 * @package  Clever\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Teacher implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Teacher';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'legacyId' => 'string',
        'created' => 'string',
        'credentials' => '\Clever\Client\Model\Credentials',
        'district' => 'string',
        'lastModified' => 'string',
        'name' => '\Clever\Client\Model\Name',
        'school' => 'string',
        'schools' => 'string[]',
        'sisId' => 'string',
        'stateId' => 'string',
        'teacherNumber' => 'string',
        'title' => 'string',
        'ext' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'legacyId' => null,
        'created' => 'datetime',
        'credentials' => null,
        'district' => null,
        'lastModified' => 'datetime',
        'name' => null,
        'school' => null,
        'schools' => null,
        'sisId' => null,
        'stateId' => null,
        'teacherNumber' => null,
        'title' => null,
        'ext' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legacyId' => 'legacy_id',
        'created' => 'created',
        'credentials' => 'credentials',
        'district' => 'district',
        'lastModified' => 'last_modified',
        'name' => 'name',
        'school' => 'school',
        'schools' => 'schools',
        'sisId' => 'sis_id',
        'stateId' => 'state_id',
        'teacherNumber' => 'teacher_number',
        'title' => 'title',
        'ext' => 'ext'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legacyId' => 'setLegacyId',
        'created' => 'setCreated',
        'credentials' => 'setCredentials',
        'district' => 'setDistrict',
        'lastModified' => 'setLastModified',
        'name' => 'setName',
        'school' => 'setSchool',
        'schools' => 'setSchools',
        'sisId' => 'setSisId',
        'stateId' => 'setStateId',
        'teacherNumber' => 'setTeacherNumber',
        'title' => 'setTitle',
        'ext' => 'setExt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legacyId' => 'getLegacyId',
        'created' => 'getCreated',
        'credentials' => 'getCredentials',
        'district' => 'getDistrict',
        'lastModified' => 'getLastModified',
        'name' => 'getName',
        'school' => 'getSchool',
        'schools' => 'getSchools',
        'sisId' => 'getSisId',
        'stateId' => 'getStateId',
        'teacherNumber' => 'getTeacherNumber',
        'title' => 'getTitle',
        'ext' => 'getExt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['legacyId'] = isset($data['legacyId']) ? $data['legacyId'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['credentials'] = isset($data['credentials']) ? $data['credentials'] : null;
        $this->container['district'] = isset($data['district']) ? $data['district'] : null;
        $this->container['lastModified'] = isset($data['lastModified']) ? $data['lastModified'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['school'] = isset($data['school']) ? $data['school'] : null;
        $this->container['schools'] = isset($data['schools']) ? $data['schools'] : null;
        $this->container['sisId'] = isset($data['sisId']) ? $data['sisId'] : null;
        $this->container['stateId'] = isset($data['stateId']) ? $data['stateId'] : null;
        $this->container['teacherNumber'] = isset($data['teacherNumber']) ? $data['teacherNumber'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['ext'] = isset($data['ext']) ? $data['ext'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacyId
     *
     * @return string
     */
    public function getLegacyId()
    {
        return $this->container['legacyId'];
    }

    /**
     * Sets legacyId
     *
     * @param string $legacyId legacyId
     *
     * @return $this
     */
    public function setLegacyId($legacyId)
    {
        $this->container['legacyId'] = $legacyId;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets credentials
     *
     * @return \Clever\Client\Model\Credentials
     */
    public function getCredentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param \Clever\Client\Model\Credentials $credentials credentials
     *
     * @return $this
     */
    public function setCredentials($credentials)
    {
        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets district
     *
     * @return string
     */
    public function getDistrict()
    {
        return $this->container['district'];
    }

    /**
     * Sets district
     *
     * @param string $district district
     *
     * @return $this
     */
    public function setDistrict($district)
    {
        $this->container['district'] = $district;

        return $this;
    }

    /**
     * Gets lastModified
     *
     * @return string
     */
    public function getLastModified()
    {
        return $this->container['lastModified'];
    }

    /**
     * Sets lastModified
     *
     * @param string $lastModified lastModified
     *
     * @return $this
     */
    public function setLastModified($lastModified)
    {
        $this->container['lastModified'] = $lastModified;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Clever\Client\Model\Name
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Clever\Client\Model\Name $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets school
     *
     * @return string
     */
    public function getSchool()
    {
        return $this->container['school'];
    }

    /**
     * Sets school
     *
     * @param string $school school
     *
     * @return $this
     */
    public function setSchool($school)
    {
        $this->container['school'] = $school;

        return $this;
    }

    /**
     * Gets schools
     *
     * @return string[]
     */
    public function getSchools()
    {
        return $this->container['schools'];
    }

    /**
     * Sets schools
     *
     * @param string[] $schools schools
     *
     * @return $this
     */
    public function setSchools($schools)
    {
        $this->container['schools'] = $schools;

        return $this;
    }

    /**
     * Gets sisId
     *
     * @return string
     */
    public function getSisId()
    {
        return $this->container['sisId'];
    }

    /**
     * Sets sisId
     *
     * @param string $sisId sisId
     *
     * @return $this
     */
    public function setSisId($sisId)
    {
        $this->container['sisId'] = $sisId;

        return $this;
    }

    /**
     * Gets stateId
     *
     * @return string
     */
    public function getStateId()
    {
        return $this->container['stateId'];
    }

    /**
     * Sets stateId
     *
     * @param string $stateId stateId
     *
     * @return $this
     */
    public function setStateId($stateId)
    {
        $this->container['stateId'] = $stateId;

        return $this;
    }

    /**
     * Gets teacherNumber
     *
     * @return string
     */
    public function getTeacherNumber()
    {
        return $this->container['teacherNumber'];
    }

    /**
     * Sets teacherNumber
     *
     * @param string $teacherNumber teacherNumber
     *
     * @return $this
     */
    public function setTeacherNumber($teacherNumber)
    {
        $this->container['teacherNumber'] = $teacherNumber;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return object
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param object $ext ext
     *
     * @return $this
     */
    public function setExt($ext)
    {
        $this->container['ext'] = $ext;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


