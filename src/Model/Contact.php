<?php
/**
 * Contact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Clever\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data API
 *
 * Serves the Clever Data API
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Clever\Client\Model;

use \ArrayAccess;
use \Clever\Client\ObjectSerializer;

/**
 * Contact Class Doc Comment
 *
 * @category Class
 * @package  Clever\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Contact implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'legacyId' => 'string',
        'phone' => 'string',
        'phoneType' => 'string',
        'sisId' => 'string',
        'studentRelationships' => '\Clever\Client\Model\StudentRelationship[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'legacyId' => null,
        'phone' => null,
        'phoneType' => null,
        'sisId' => null,
        'studentRelationships' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legacyId' => 'legacy_id',
        'phone' => 'phone',
        'phoneType' => 'phone_type',
        'sisId' => 'sis_id',
        'studentRelationships' => 'student_relationships'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legacyId' => 'setLegacyId',
        'phone' => 'setPhone',
        'phoneType' => 'setPhoneType',
        'sisId' => 'setSisId',
        'studentRelationships' => 'setStudentRelationships'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legacyId' => 'getLegacyId',
        'phone' => 'getPhone',
        'phoneType' => 'getPhoneType',
        'sisId' => 'getSisId',
        'studentRelationships' => 'getStudentRelationships'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PHONE_TYPE_CELL = 'Cell';
    const PHONE_TYPE_HOME = 'Home';
    const PHONE_TYPE_WORK = 'Work';
    const PHONE_TYPE_OTHER = 'Other';
    const PHONE_TYPE_EMPTY = '';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhoneTypeAllowableValues()
    {
        return [
            self::PHONE_TYPE_CELL,
            self::PHONE_TYPE_HOME,
            self::PHONE_TYPE_WORK,
            self::PHONE_TYPE_OTHER,
            self::PHONE_TYPE_EMPTY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['legacyId'] = isset($data['legacyId']) ? $data['legacyId'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['phoneType'] = isset($data['phoneType']) ? $data['phoneType'] : null;
        $this->container['sisId'] = isset($data['sisId']) ? $data['sisId'] : null;
        $this->container['studentRelationships'] = isset($data['studentRelationships']) ? $data['studentRelationships'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPhoneTypeAllowableValues();
        if (!is_null($this->container['phoneType']) && !in_array($this->container['phoneType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'phoneType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legacyId
     *
     * @return string
     */
    public function getLegacyId()
    {
        return $this->container['legacyId'];
    }

    /**
     * Sets legacyId
     *
     * @param string $legacyId legacyId
     *
     * @return $this
     */
    public function setLegacyId($legacyId)
    {
        $this->container['legacyId'] = $legacyId;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets phoneType
     *
     * @return string
     */
    public function getPhoneType()
    {
        return $this->container['phoneType'];
    }

    /**
     * Sets phoneType
     *
     * @param string $phoneType phoneType
     *
     * @return $this
     */
    public function setPhoneType($phoneType)
    {
        $allowedValues = $this->getPhoneTypeAllowableValues();
        if (!is_null($phoneType) && !in_array($phoneType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'phoneType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['phoneType'] = $phoneType;

        return $this;
    }

    /**
     * Gets sisId
     *
     * @return string
     */
    public function getSisId()
    {
        return $this->container['sisId'];
    }

    /**
     * Sets sisId
     *
     * @param string $sisId sisId
     *
     * @return $this
     */
    public function setSisId($sisId)
    {
        $this->container['sisId'] = $sisId;

        return $this;
    }

    /**
     * Gets studentRelationships
     *
     * @return \Clever\Client\Model\StudentRelationship[]
     */
    public function getStudentRelationships()
    {
        return $this->container['studentRelationships'];
    }

    /**
     * Sets studentRelationships
     *
     * @param \Clever\Client\Model\StudentRelationship[] $studentRelationships studentRelationships
     *
     * @return $this
     */
    public function setStudentRelationships($studentRelationships)
    {
        $this->container['studentRelationships'] = $studentRelationships;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


