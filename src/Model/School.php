<?php
/**
 * School
 *
 * PHP version 5
 *
 * @category Class
 * @package  Clever\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Data API
 *
 * Serves the Clever Data API
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Clever\Client\Model;

use \ArrayAccess;
use \Clever\Client\ObjectSerializer;

/**
 * School Class Doc Comment
 *
 * @category Class
 * @package  Clever\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class School implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'School';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'created' => 'string',
        'district' => 'string',
        'highGrade' => 'string',
        'lastModified' => 'string',
        'location' => '\Clever\Client\Model\Location',
        'lowGrade' => 'string',
        'name' => 'string',
        'ncesId' => 'string',
        'phone' => 'string',
        'principal' => '\Clever\Client\Model\Principal',
        'schoolNumber' => 'string',
        'sisId' => 'string',
        'stateId' => 'string',
        'mdrNumber' => 'string',
        'ext' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created' => 'datetime',
        'district' => null,
        'highGrade' => null,
        'lastModified' => 'datetime',
        'location' => null,
        'lowGrade' => null,
        'name' => null,
        'ncesId' => null,
        'phone' => null,
        'principal' => null,
        'schoolNumber' => null,
        'sisId' => null,
        'stateId' => null,
        'mdrNumber' => null,
        'ext' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'district' => 'district',
        'highGrade' => 'high_grade',
        'lastModified' => 'last_modified',
        'location' => 'location',
        'lowGrade' => 'low_grade',
        'name' => 'name',
        'ncesId' => 'nces_id',
        'phone' => 'phone',
        'principal' => 'principal',
        'schoolNumber' => 'school_number',
        'sisId' => 'sis_id',
        'stateId' => 'state_id',
        'mdrNumber' => 'mdr_number',
        'ext' => 'ext'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'district' => 'setDistrict',
        'highGrade' => 'setHighGrade',
        'lastModified' => 'setLastModified',
        'location' => 'setLocation',
        'lowGrade' => 'setLowGrade',
        'name' => 'setName',
        'ncesId' => 'setNcesId',
        'phone' => 'setPhone',
        'principal' => 'setPrincipal',
        'schoolNumber' => 'setSchoolNumber',
        'sisId' => 'setSisId',
        'stateId' => 'setStateId',
        'mdrNumber' => 'setMdrNumber',
        'ext' => 'setExt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'district' => 'getDistrict',
        'highGrade' => 'getHighGrade',
        'lastModified' => 'getLastModified',
        'location' => 'getLocation',
        'lowGrade' => 'getLowGrade',
        'name' => 'getName',
        'ncesId' => 'getNcesId',
        'phone' => 'getPhone',
        'principal' => 'getPrincipal',
        'schoolNumber' => 'getSchoolNumber',
        'sisId' => 'getSisId',
        'stateId' => 'getStateId',
        'mdrNumber' => 'getMdrNumber',
        'ext' => 'getExt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const HIGH_GRADE_INFANT_TODDLER = 'InfantToddler';
    const HIGH_GRADE_PRESCHOOL = 'Preschool';
    const HIGH_GRADE_PRE_KINDERGARTEN = 'PreKindergarten';
    const HIGH_GRADE_TRANSITIONAL_KINDERGARTEN = 'TransitionalKindergarten';
    const HIGH_GRADE_KINDERGARTEN = 'Kindergarten';
    const HIGH_GRADE__1 = '1';
    const HIGH_GRADE__2 = '2';
    const HIGH_GRADE__3 = '3';
    const HIGH_GRADE__4 = '4';
    const HIGH_GRADE__5 = '5';
    const HIGH_GRADE__6 = '6';
    const HIGH_GRADE__7 = '7';
    const HIGH_GRADE__8 = '8';
    const HIGH_GRADE__9 = '9';
    const HIGH_GRADE__10 = '10';
    const HIGH_GRADE__11 = '11';
    const HIGH_GRADE__12 = '12';
    const HIGH_GRADE__13 = '13';
    const HIGH_GRADE_POST_GRADUATE = 'PostGraduate';
    const HIGH_GRADE_UNGRADED = 'Ungraded';
    const HIGH_GRADE_OTHER = 'Other';
    const HIGH_GRADE_EMPTY = '';
    const LOW_GRADE_INFANT_TODDLER = 'InfantToddler';
    const LOW_GRADE_PRESCHOOL = 'Preschool';
    const LOW_GRADE_PRE_KINDERGARTEN = 'PreKindergarten';
    const LOW_GRADE_TRANSITIONAL_KINDERGARTEN = 'TransitionalKindergarten';
    const LOW_GRADE_KINDERGARTEN = 'Kindergarten';
    const LOW_GRADE__1 = '1';
    const LOW_GRADE__2 = '2';
    const LOW_GRADE__3 = '3';
    const LOW_GRADE__4 = '4';
    const LOW_GRADE__5 = '5';
    const LOW_GRADE__6 = '6';
    const LOW_GRADE__7 = '7';
    const LOW_GRADE__8 = '8';
    const LOW_GRADE__9 = '9';
    const LOW_GRADE__10 = '10';
    const LOW_GRADE__11 = '11';
    const LOW_GRADE__12 = '12';
    const LOW_GRADE__13 = '13';
    const LOW_GRADE_POST_GRADUATE = 'PostGraduate';
    const LOW_GRADE_UNGRADED = 'Ungraded';
    const LOW_GRADE_OTHER = 'Other';
    const LOW_GRADE_EMPTY = '';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHighGradeAllowableValues()
    {
        return [
            self::HIGH_GRADE_INFANT_TODDLER,
            self::HIGH_GRADE_PRESCHOOL,
            self::HIGH_GRADE_PRE_KINDERGARTEN,
            self::HIGH_GRADE_TRANSITIONAL_KINDERGARTEN,
            self::HIGH_GRADE_KINDERGARTEN,
            self::HIGH_GRADE__1,
            self::HIGH_GRADE__2,
            self::HIGH_GRADE__3,
            self::HIGH_GRADE__4,
            self::HIGH_GRADE__5,
            self::HIGH_GRADE__6,
            self::HIGH_GRADE__7,
            self::HIGH_GRADE__8,
            self::HIGH_GRADE__9,
            self::HIGH_GRADE__10,
            self::HIGH_GRADE__11,
            self::HIGH_GRADE__12,
            self::HIGH_GRADE__13,
            self::HIGH_GRADE_POST_GRADUATE,
            self::HIGH_GRADE_UNGRADED,
            self::HIGH_GRADE_OTHER,
            self::HIGH_GRADE_EMPTY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLowGradeAllowableValues()
    {
        return [
            self::LOW_GRADE_INFANT_TODDLER,
            self::LOW_GRADE_PRESCHOOL,
            self::LOW_GRADE_PRE_KINDERGARTEN,
            self::LOW_GRADE_TRANSITIONAL_KINDERGARTEN,
            self::LOW_GRADE_KINDERGARTEN,
            self::LOW_GRADE__1,
            self::LOW_GRADE__2,
            self::LOW_GRADE__3,
            self::LOW_GRADE__4,
            self::LOW_GRADE__5,
            self::LOW_GRADE__6,
            self::LOW_GRADE__7,
            self::LOW_GRADE__8,
            self::LOW_GRADE__9,
            self::LOW_GRADE__10,
            self::LOW_GRADE__11,
            self::LOW_GRADE__12,
            self::LOW_GRADE__13,
            self::LOW_GRADE_POST_GRADUATE,
            self::LOW_GRADE_UNGRADED,
            self::LOW_GRADE_OTHER,
            self::LOW_GRADE_EMPTY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['district'] = isset($data['district']) ? $data['district'] : null;
        $this->container['highGrade'] = isset($data['highGrade']) ? $data['highGrade'] : null;
        $this->container['lastModified'] = isset($data['lastModified']) ? $data['lastModified'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['lowGrade'] = isset($data['lowGrade']) ? $data['lowGrade'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['ncesId'] = isset($data['ncesId']) ? $data['ncesId'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['principal'] = isset($data['principal']) ? $data['principal'] : null;
        $this->container['schoolNumber'] = isset($data['schoolNumber']) ? $data['schoolNumber'] : null;
        $this->container['sisId'] = isset($data['sisId']) ? $data['sisId'] : null;
        $this->container['stateId'] = isset($data['stateId']) ? $data['stateId'] : null;
        $this->container['mdrNumber'] = isset($data['mdrNumber']) ? $data['mdrNumber'] : null;
        $this->container['ext'] = isset($data['ext']) ? $data['ext'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHighGradeAllowableValues();
        if (!is_null($this->container['highGrade']) && !in_array($this->container['highGrade'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'highGrade', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLowGradeAllowableValues();
        if (!is_null($this->container['lowGrade']) && !in_array($this->container['lowGrade'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'lowGrade', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets district
     *
     * @return string
     */
    public function getDistrict()
    {
        return $this->container['district'];
    }

    /**
     * Sets district
     *
     * @param string $district district
     *
     * @return $this
     */
    public function setDistrict($district)
    {
        $this->container['district'] = $district;

        return $this;
    }

    /**
     * Gets highGrade
     *
     * @return string
     */
    public function getHighGrade()
    {
        return $this->container['highGrade'];
    }

    /**
     * Sets highGrade
     *
     * @param string $highGrade highGrade
     *
     * @return $this
     */
    public function setHighGrade($highGrade)
    {
        $allowedValues = $this->getHighGradeAllowableValues();
        if (!is_null($highGrade) && !in_array($highGrade, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'highGrade', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['highGrade'] = $highGrade;

        return $this;
    }

    /**
     * Gets lastModified
     *
     * @return string
     */
    public function getLastModified()
    {
        return $this->container['lastModified'];
    }

    /**
     * Sets lastModified
     *
     * @param string $lastModified lastModified
     *
     * @return $this
     */
    public function setLastModified($lastModified)
    {
        $this->container['lastModified'] = $lastModified;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Clever\Client\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Clever\Client\Model\Location $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets lowGrade
     *
     * @return string
     */
    public function getLowGrade()
    {
        return $this->container['lowGrade'];
    }

    /**
     * Sets lowGrade
     *
     * @param string $lowGrade lowGrade
     *
     * @return $this
     */
    public function setLowGrade($lowGrade)
    {
        $allowedValues = $this->getLowGradeAllowableValues();
        if (!is_null($lowGrade) && !in_array($lowGrade, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lowGrade', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lowGrade'] = $lowGrade;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ncesId
     *
     * @return string
     */
    public function getNcesId()
    {
        return $this->container['ncesId'];
    }

    /**
     * Sets ncesId
     *
     * @param string $ncesId ncesId
     *
     * @return $this
     */
    public function setNcesId($ncesId)
    {
        $this->container['ncesId'] = $ncesId;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets principal
     *
     * @return \Clever\Client\Model\Principal
     */
    public function getPrincipal()
    {
        return $this->container['principal'];
    }

    /**
     * Sets principal
     *
     * @param \Clever\Client\Model\Principal $principal principal
     *
     * @return $this
     */
    public function setPrincipal($principal)
    {
        $this->container['principal'] = $principal;

        return $this;
    }

    /**
     * Gets schoolNumber
     *
     * @return string
     */
    public function getSchoolNumber()
    {
        return $this->container['schoolNumber'];
    }

    /**
     * Sets schoolNumber
     *
     * @param string $schoolNumber schoolNumber
     *
     * @return $this
     */
    public function setSchoolNumber($schoolNumber)
    {
        $this->container['schoolNumber'] = $schoolNumber;

        return $this;
    }

    /**
     * Gets sisId
     *
     * @return string
     */
    public function getSisId()
    {
        return $this->container['sisId'];
    }

    /**
     * Sets sisId
     *
     * @param string $sisId sisId
     *
     * @return $this
     */
    public function setSisId($sisId)
    {
        $this->container['sisId'] = $sisId;

        return $this;
    }

    /**
     * Gets stateId
     *
     * @return string
     */
    public function getStateId()
    {
        return $this->container['stateId'];
    }

    /**
     * Sets stateId
     *
     * @param string $stateId stateId
     *
     * @return $this
     */
    public function setStateId($stateId)
    {
        $this->container['stateId'] = $stateId;

        return $this;
    }

    /**
     * Gets mdrNumber
     *
     * @return string
     */
    public function getMdrNumber()
    {
        return $this->container['mdrNumber'];
    }

    /**
     * Sets mdrNumber
     *
     * @param string $mdrNumber mdrNumber
     *
     * @return $this
     */
    public function setMdrNumber($mdrNumber)
    {
        $this->container['mdrNumber'] = $mdrNumber;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return object
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param object $ext ext
     *
     * @return $this
     */
    public function setExt($ext)
    {
        $this->container['ext'] = $ext;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


